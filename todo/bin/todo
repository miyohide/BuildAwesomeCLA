#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
  require 'todo'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/todo` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/todo now"
  exit 64
end

include GLI::App

program_desc ' '

version Todo::VERSION

subcommand_option_handling :normal
arguments :strict

desc 'Path to the todo file'
arg_name "todo_file"
default_value "~/.todo.txt"
flag [:f, :filename]

desc 'Create a new task in the task list'
long_desc "
A task has a name and a priority. By default, new
tasks have the lowest possible priority, though
this can be overridden.
"
arg_name 'task_name'
command :new do |c|
  c.desc 'set the priority of the new task, 1 being the highest'
  c.arg_name 'priority'
  c.flag :p

  c.desc 'put the new task first in the list'
  c.switch :f

  c.action do |global_options,options,args|
    puts "Global:"
    puts "-f - #{global_options[:f]}"
    puts "Command:"
    puts "-f - #{options[:f] ? 'true' : 'false' }"
    puts "--priority - #{options[:priority]}"
    puts "args - #{args.join(',')}"
  end
end

desc 'List tasks'
arg_name 'Describe arguments to list here'
command :list do |c|
  c.flag :s
  c.action do |global_options,options,args|
    # TODO read_todosメソッドの実装
    todos = read_todos(global_options[:filename])
    if options[:s] == 'name'
      todos = todos.sort { |a,b| a <=> b }
    end
    todos.each do |todo|
      puts todo
    end
  end
end

desc 'Complete a task'
arg_name 'Describe arguments to done here'
command :done do |c|
  c.action do |global_options,options,args|
    puts "Global:"
    puts "-f - #{global_options[:f]}"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
